// File: arm_rfft.h

// Declarations of functionalities in ARM RFFT module.

#ifndef _arm_rfft_h_
#define _arm_rfft_h_

////////////////////////////////////////////////////////////////////////////////
// Header file inclusions.                                                    //
////////////////////////////////////////////////////////////////////////////////

#include <stdint.h>

////////////////////////////////////////////////////////////////////////////////
// Type definitions.                                                          //
////////////////////////////////////////////////////////////////////////////////

// Error status.
typedef enum
{
    // No error
    ARM_MATH_SUCCESS = 0,
    // One or more arguments are incorrect
    ARM_MATH_ARGUMENT_ERROR = -1,
    // Length of data buffer is incorrect
    ARM_MATH_LENGTH_ERROR = -2,
    // Size of matrices is not compatible with the operation.
    ARM_MATH_SIZE_MISMATCH = -3,
    // Not-a-number (NaN) or infinity is generated
    ARM_MATH_NANINF = -4,
    // Generated by matrix inversion
    // if the input matrix is singular and cannot be inverted.
    ARM_MATH_SINGULAR = -5,
    // Test Failed
    ARM_MATH_TEST_FAILURE = -6
} arm_status;

// Instance structure for the floating-point CFFT/CIFFT function.
typedef struct
{
    uint16_t fftLen;                   // length of the FFT.
    const double *pTwiddle;            // points to the Twiddle factor table.
    const uint16_t *pBitRevTable;      // points to the bit reversal table.
    uint16_t bitRevLength;             // bit reversal table length.
} arm_cfft_instance_f32;

// Instance structure for the floating-point RFFT/RIFFT function.
typedef struct
{
    arm_cfft_instance_f32 Sint;      // Internal CFFT structure.
    uint16_t fftLenRFFT;             // length of the real sequence
    double *pTwiddleRFFT;            // Twiddle factors real stage
} arm_rfft_fast_instance_f32 ;


////////////////////////////////////////////////////////////////////////////////
// Global function declarations.                                              //
////////////////////////////////////////////////////////////////////////////////

// Initialises fast RFFT.
arm_status arm_rfft_fast_init_f32(
    arm_rfft_fast_instance_f32* S, uint16_t fftLen );

// Performs a fast RFFT calculation.
void arm_rfft_fast_f32( arm_rfft_fast_instance_f32* S,
    double* p, double* pOut, uint8_t ifftFlag );

#endif