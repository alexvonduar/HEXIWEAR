unit MIKROBUS_framework.mpas

//----------------------------------------------------------------------------------------------------------------------
//                                                                                              FRAMEWORK CONST & TYPES
//----------------------------------------------------------------------------------------------------------------------

const
AN_PIN          	: byte = 0;
RST_PIN         	: byte = 1;
CS_PIN          	: byte = 2;
PWM_PIN         	: byte = 3;
INT_PIN         	: byte = 4;

{$IFDEF __MIKROPASCAL_PRO_FOR_ARM__ }
{$I __ARM_types}
{$ENDIF}
{$IFDEF __MIKROPASCAL_PRO_FOR_AVR__ }
{$I __AVR_types}
{$ENDIF}
{$IFDEF __MIKROPASCAL_PRO_FOR_PIC__ }
{$I __PIC_types}
{$ENDIF}
{$IFDEF __MIKROPASCAL_PRO_FOR_PIC32__ }
{$I __PIC32_types}
{$ENDIF}
{$IFDEF __MIKROPASCAL_PRO_FOR_DSPIC__ }
{$I __DSPIC_types}
{$ENDIF}
{$IFDEF __MIKROPASCAL_PRO_FOR_FT90x__ }
{$I __FT90x_types}
{$ENDIF}

//----------------------------------------------------------------------------------------------------------------------
//                                                                                                  FRAMEWORK FUNCTIONS
//----------------------------------------------------------------------------------------------------------------------

function MIKROBUS_GPIOdirection( MIKROBUS :byte; position :byte; direction :byte ) : byte;

{$IFDEF __SPI_CLICK}
type
    T_MIKROBUS_spiObj = record
    	pInit		: T_I2C_init;
        pWrite      : T_SPI_write;
        pRead       : T_SPI_read;
        spiModule	: ^const Module_Struct;
end;

type T_SPI_initializer   = procedure(wr: ^T_SPI_write; rd: ^T_SPI_read);

procedure MIKROBUS_SPIdriverInit( spiObj: T_MIKROBUS_spiObj; fpInit :^T_SPI_initializer; config :^dword );
{$ENDIF}
{$IFDEF __I2C_CLICK}
type 
    T_MIKROBUS_i2cObj = record
    	pInit		: T_I2C_init;
        pStart      : T_I2C_start;
        pStop       : T_I2C_stop;
        pRestart    : T_I2C_restart;
        pWrite      : T_I2C_write;
        pRead       : T_I2C_read;
        i2cModule	: ^const Module_Struct;
end;

type T_I2C_initializer   = procedure(st: ^T_I2C_start; stp: ^T_I2C_stop; res: ^T_I2C_restart; wr: ^T_I2C_write; rd: ^T_I2C_read);

procedure MIKROBUS_I2CdriverInit( i2cObj: T_MIKROBUS_i2cObj; fpInit :^T_I2C_initializer; config :^dword );
{$ENDIF}
{$IFDEF __UART_CLICK}
type   
    T_MIKROBUS_uartObj = record
    	pInit		: T_UART_init;
        pWrite      : T_UART_write;
        pRead       : T_UART_read;
        pReady      : T_UART_ready;
        uartModule	: ^const Module_Struct;
end;

type T_UART_initializer  = procedure(wr: ^T_UART_writer; rd : ^T_UART_reader; rdy: ^T_UART_ready);

procedure MIKROBUS_UARTdriverInit( uartObj: T_MIKROBUS_uartObj; fpInit :^T_UART_initializer; config :^dword );
{$ENDIF}

//----------------------------------------------------------------------------------------------------------------------
//                                                                                         FRAMEWORK TOOLCHAIN SELECTOR
//----------------------------------------------------------------------------------------------------------------------

{$IFDEF __MIKROPASCAL_PRO_FOR_ARM__ }
{$I __ARM_systems}
{$I __ARM_functions} 
{$ENDIF}
{$IFDEF __MIKROPASCAL_PRO_FOR_AVR__ }
{$I __AVR_systems}
{$I __AVR_functions} 
{$ENDIF}
{$IFDEF __MIKROPASCAL_PRO_FOR_PIC__ }
{$I __PIC_systems}
{$I __PIC_functions} 
{$ENDIF}
{$IFDEF __MIKROPASCAL_PRO_FOR_PIC32__ }
{$I __PIC32_systems}
{$I __PIC32_functions} 
{$ENDIF}
{$IFDEF __MIKROPASCAL_PRO_FOR_DSPIC__ }
{$I __DSPIC_systems}
{$I __DSPIC_functions} 
{$ENDIF}
{$IFDEF __MIKROPASCAL_PRO_FOR_FT90x__ }
{$I __FT90x_systems}
{$I __FT90x_functions} 
{$ENDIF}

end.
