{$IFNDEF SYSTEM_MAPPED}
{$DEFINE SYSTEM_MAPPED}

const
MIKROBUS1   : byte = 0;

{$IFDEF __SPI_CLICK}
const
MIKROBUS1_SPI : T_MIKROBUS_spiObj = 
(
    @SPI2_Init_Advanced,
    @SPI2_Write,
    @SPI2_Read,
    0
);
{$ENDIF}
{$IFDEF __I2C_CLICK}
const
MIKROBUS1_I2C : T_MIKROBUS_i2cObj =
(
    @I2C5_Init,
    @I2C5_Start,
    @I2C5_Stop,
    @I2C5_Restart,
    @I2C5_Write,
    @I2C5_Read,
    0
);
{$ENDIF}
{$IFDEF __UART_CLICK}
const
MIKROBUS1_UART : T_MIKROBUS_uartObj =
(
    @UART5_Init,
    @UART5_Write,
    @UART5_Read,
    @UART5_Data_Ready,
    0
);
{$ENDIF}

var
MIKROBUS1_PIN_AN_INPUT          : sbit at RB3_bit;
MIKROBUS1_PIN_AN_OUTPUT         : sbit at LATB3_bit;
MIKROBUS1_PIN_RST_INPUT         : sbit at RD7_bit;
MIKROBUS1_PIN_RST_OUTPUT        : sbit at LATD7_bit;
MIKROBUS1_PIN_CS_INPUT          : sbit at RG9_bit;
MIKROBUS1_PIN_CS_OUTPUT         : sbit at LATG9_bit;
MIKROBUS1_PIN_PWM_INPUT         : sbit at RD0_bit;
MIKROBUS1_PIN_PWM_OUTPUT        : sbit at LATD0_bit;
MIKROBUS1_PIN_INT_INPUT         : sbit at RD11_bit;
MIKROBUS1_PIN_INT_OUTPUT        : sbit at LATD11_bit;

implementation
function MIKROBUS_GPIOdirection( MIKROBUS :byte; pos :byte; dir :byte) : byte;
begin 
    if( dir = GPIO_INPUT ) then
    begin
    case MIKROBUS of
        MIKROBUS1 :
        begin 
            case pos of       
            AN_PIN :                    TRISB3_bit = dir;
            RST_PIN :                   TRISD7_bit = dir;
            CS_PIN :                    TRISG9_bit = dir;
            PWM_PIN :                   TRISD0_bit = dir;
            INT_PIN :                   TRISD11_bit = dir;
            else
                result := 1;
            end;
        end;
    else
        result := 1;
        end;
    end;
end;
{$ENDIF}